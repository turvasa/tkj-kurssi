#include <stdio.h>
#include <xdc/std.h>
#include <xdc/runtime/System.h>
#include <ti/sysbios/BIOS.h>
#include <ti/sysbios/knl/Clock.h>
#include <ti/sysbios/knl/Task.h>
#include <ti/drivers/PIN.h>
#include <ti/drivers/pin/PINCC26XX.h>
#include <ti/drivers/I2C.h>
#include <ti/drivers/Power.h>
#include <ti/drivers/power/PowerCC26XX.h>
#include <ti/drivers/UART.h>
#include <ti/drivers/i2c/I2CCC26XX.h>
#include <ctype.h> // For toupper()

#include "Board.h"
#include "sensors/mpu9250.h"

#define STACKSIZE 2048
#define MORSE_UNIT_DURATION 50000  // Duration of a Morse unit in microseconds

Char sensorTaskStack[STACKSIZE];
Char uartTaskStack[STACKSIZE];

// State Machine Enum
enum state { WAITING, RECEIVING, READY_TO_PLAY };
enum state programState = WAITING;

static PIN_Handle buttonHandle, ledHandle, hMpuPin;
static PIN_State buttonState, ledState, MpuPinState;

PIN_Config buttonConfig[] = {
   Board_BUTTON0  | PIN_INPUT_EN | PIN_PULLUP | PIN_IRQ_NEGEDGE,
   Board_BUTTON1  | PIN_INPUT_EN | PIN_PULLUP | PIN_IRQ_NEGEDGE,
   PIN_TERMINATE
};

PIN_Config ledConfig[] = {
   Board_LED1 | PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL | PIN_DRVSTR_MAX,
   PIN_TERMINATE
};

static PIN_Config MpuPinConfig[] = {
   Board_MPU_POWER | PIN_GPIO_OUTPUT_EN | PIN_GPIO_HIGH | PIN_PUSHPULL | PIN_DRVSTR_MAX,
   PIN_TERMINATE
};

static const I2CCC26XX_I2CPinCfg i2cMPUCfg = {
   .pinSDA = Board_I2C0_SDA1,
   .pinSCL = Board_I2C0_SCL1,
};

// Morse Code Table
const char* morse_code[26] = {
    ".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..", ".---",
    "-.-", ".-..", "--", "-.", "---", ".--.", "--.-", ".-.", "...", "-",
    "..-", "...-", ".--", "-..-", "-.--", "--.."
};

// Function Prototypes
void play_morse_with_buzzer(const char *message);
void interpret_morse(float ax, float ay, float az);

// Global variables for button press handling
static int pressCount = 0;  // Track how many times the button has been pressed
int spaceCount = 0;         // Counter for detecting two spaces
char currentWord[100] = "";  // Buffer for the current word being written in Morse code
int wordIndex = 0;          // Index to track the position in currentWord

void buttonFxn(PIN_Handle handle, PIN_Id pinId) {
    uint_t pinValue = PIN_getInputValue(pinId); // Get current button value

    if (pinValue == 0) {  // Button is pressed (assuming active-low button)
        pressCount++;  // Increment press count for each press

        // If a single press, add a dot
        if (pressCount == 1) {
            currentWord[wordIndex++] = '.';
            System_printf(".");  // Print dot to console
            System_flush();
        }

        // If two consecutive presses, add a space (end of letter)
        else if (pressCount == 2) {
            currentWord[wordIndex++] = ' ';  // Add a space between letters
            spaceCount++;  // Increment space count
            System_printf(" ");  // Print space to console
            System_flush();
        }

        // If three consecutive presses, end the word (two spaces detected)
        if (spaceCount == 2) {
            currentWord[wordIndex] = '\0';  // Null-terminate the current word
            System_printf("Word completed: %s\n", currentWord);  // Print the word to console
            System_flush();
            translate_morse_to_text(currentWord);  // Translate Morse to text
            wordIndex = 0;  // Reset for the next word
            spaceCount = 0;  // Reset space count
        }
    } else {  // Button is released
        // If button is released, reset the press count for the next press
        if (pressCount > 0) {
            pressCount = 0;  // Reset press count after release
        }
    }
}

// This function translates Morse code into normal text (A-Z).
void translate_morse_to_text(const char* morse) {
    char translatedWord[100];
    int wordIdx = 0;
    int i;
    // Split the Morse string into words (use two spaces to separate words)
    char* token = strtok(morse, "  ");  // Separate words by two spaces
    while (token != NULL) {
        for (i = 0; i < 26; i++) {
            if (strcmp(token, morse_code[i]) == 0) {
                translatedWord[wordIdx++] = 'A' + i;  // Add corresponding letter to word
                break;
            }
        }
        token = strtok(NULL, "  ");  // Get next word
    }
    translatedWord[wordIdx] = '\0';  // Null-terminate the translated word
    System_printf("Translated word: %s\n", translatedWord);  // Print the translated word
    System_flush();
}

Void uartTaskFxn(UArg arg0, UArg arg1) {
    UART_Handle uart;
    UART_Params uartParams;
    char input[100];
    int len;

    UART_Params_init(&uartParams);
    uartParams.writeDataMode = UART_DATA_TEXT;
    uartParams.readDataMode = UART_DATA_TEXT;
    uartParams.readEcho = UART_ECHO_ON;
    uartParams.readReturnMode = UART_RETURN_NEWLINE;
    uartParams.baudRate = 9600;

    uart = UART_open(Board_UART0, &uartParams);
    if (uart == NULL) {
       System_abort("Error opening the UART");
    }

    while (1) {
        System_printf("Enter a word to play in Morse code:\n");
        System_flush();

        len = UART_read(uart, input, sizeof(input) - 1);
        if (len > 0) {
            int i;
            input[len] = '\0';
            for (i = 0; i < len; i++) {
                input[i] = toupper(input[i]);
            }
            play_morse_with_buzzer(input); //Play the Morse code
        }
        Task_sleep(100000 / Clock_tickPeriod);
    }
}

Void sensorTaskFxn(UArg arg0, UArg arg1) {
    float ax, ay, az, gx, gy, gz;
    I2C_Handle i2cMPU;
    I2C_Params i2cMPUParams;

    I2C_Params_init(&i2cMPUParams);
    i2cMPUParams.bitRate = I2C_400kHz;
    i2cMPUParams.custom = (uintptr_t)&i2cMPUCfg;

    PIN_setOutputValue(hMpuPin, Board_MPU_POWER, Board_MPU_POWER_ON);

    i2cMPU = I2C_open(Board_I2C, &i2cMPUParams);
    if (i2cMPU == NULL) {
       System_abort("Error Initializing I2C\n");
    }
    Task_sleep(10000 / Clock_tickPeriod);
    mpu9250_setup(&i2cMPU);

    int spaceCount = 0;
    char currentWord[100] = "";
    int wordIndex = 0;

    while (1) {
        mpu9250_get_data(&i2cMPU, &ax, &ay, &az, &gx, &gy, &gz);


        interpret_morse(ax, ay, az);

        if (spaceCount == 2) {
            System_printf("Word: %s\n", currentWord);
            System_flush();
            spaceCount = 0;
            currentWord[0] = '\0';
            programState = RECEIVING;
        }

        Task_sleep(100000 / Clock_tickPeriod);
    }

    I2C_close(i2cMPU);
}

void interpret_morse(float ax, float ay, float az) {
    if (ax > 0.5) {
        // Detect dot
        System_printf(".\n");
        System_flush();
    } else if (ay > 0.5) {
        // Detect dash
        System_printf("-\n");
        System_flush();
    }
}

void play_morse_with_buzzer(const char *message) {
    int i, j;
    for (i = 0; message[i] != '\0'; i++) {
        char ch = message[i];
        if (ch >= 'A' && ch <= 'Z') {
            const char *code = morse_code[ch - 'A'];
            for (j = 0; code[j] != '\0'; j++) {
                if (code[j] == '.') {
                    PIN_setOutputValue(ledHandle, Board_LED1, 1);  /
                    Task_sleep(MORSE_UNIT_DURATION / Clock_tickPeriod);
                    PIN_setOutputValue(ledHandle, Board_LED1, 0);
                } else if (code[j] == '-') {
                    PIN_setOutputValue(ledHandle, Board_LED1, 1);
                    Task_sleep(3 * MORSE_UNIT_DURATION / Clock_tickPeriod);
                    PIN_setOutputValue(ledHandle, Board_LED1, 0);
                }
                Task_sleep(MORSE_UNIT_DURATION / Clock_tickPeriod);
            }
            Task_sleep(3 * MORSE_UNIT_DURATION / Clock_tickPeriod);
        } else if (ch == ' ') {
            Task_sleep(7 * MORSE_UNIT_DURATION / Clock_tickPeriod);
        }
    }
}

Int main(void) {
    Task_Handle sensorTaskHandle;
    Task_Params sensorTaskParams;
    Task_Handle uartTaskHandle;
    Task_Params uartTaskParams;

    Board_initGeneral();
    Board_initI2C();
    Board_initUART();

    ledHandle = PIN_open(&ledState, ledConfig);
    if (!ledHandle) {
       System_abort("Error initializing LED pin\n");
    }

    buttonHandle = PIN_open(&buttonState, buttonConfig);
    if (!buttonHandle) {
       System_abort("Error initializing button pin\n");
    }

    if (PIN_registerIntCb(buttonHandle, &buttonFxn) != 0) {
       System_abort("Error registering button callback function");
    }

    hMpuPin = PIN_open(&MpuPinState, MpuPinConfig);
    if (!hMpuPin) {
       System_abort("Error initializing sensor pin\n");
    }

    Task_Params_init(&sensorTaskParams);
    sensorTaskParams.stackSize = STACKSIZE;
    sensorTaskParams.stack = &sensorTaskStack;
    sensorTaskParams.priority = 1;
    sensorTaskHandle = Task_create(sensorTaskFxn, &sensorTaskParams, NULL);
    if (sensorTaskHandle == NULL) {
        System_abort("Error creating sensor task\n");
    }

    Task_Params_init(&uartTaskParams);
    uartTaskParams.stackSize = STACKSIZE;
    uartTaskParams.stack = &uartTaskStack;
    uartTaskParams.priority = 1;
    uartTaskHandle = Task_create(uartTaskFxn, &uartTaskParams, NULL);
    if (uartTaskHandle == NULL) {
        System_abort("Error creating UART task\n");
    }

    BIOS_start();  // Start BIOS
}
