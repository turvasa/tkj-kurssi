#include <stdio.h>
#include <xdc/std.h>
#include <xdc/runtime/System.h>
#include <ti/sysbios/BIOS.h>
#include <ti/sysbios/knl/Clock.h>
#include <ti/sysbios/knl/Task.h>
#include <ti/drivers/PIN.h>
#include <ti/drivers/pin/PINCC26XX.h>
#include <ti/drivers/I2C.h>
#include <ti/drivers/Power.h>
#include <ti/drivers/power/PowerCC26XX.h>
#include <ti/drivers/UART.h>
#include <ti/drivers/i2c/I2CCC26XX.h>
#include <ctype.h> // For toupper()

#include "Board.h"
#include "sensors/mpu9250.h"

#define STACKSIZE 2048
#define MORSE_UNIT_DURATION 50000  // Duration of a Morse unit in microseconds

Char sensorTaskStack[STACKSIZE];
Char uartTaskStack[STACKSIZE];

// State Machine Enum
enum state { WAITING, RECEIVING, READY_TO_PLAY };
enum state programState = WAITING;

static PIN_Handle buttonHandle, ledHandle, hMpuPin;
static PIN_State buttonState, ledState, MpuPinState;

PIN_Config buttonConfig[] = {
   Board_BUTTON0  | PIN_INPUT_EN | PIN_PULLUP | PIN_IRQ_NEGEDGE,
   Board_BUTTON1  | PIN_INPUT_EN | PIN_PULLUP | PIN_IRQ_NEGEDGE,
   PIN_TERMINATE
};

PIN_Config ledConfig[] = {
   Board_LED1 | PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL | PIN_DRVSTR_MAX,
   PIN_TERMINATE
};

static PIN_Config MpuPinConfig[] = {
   Board_MPU_POWER | PIN_GPIO_OUTPUT_EN | PIN_GPIO_HIGH | PIN_PUSHPULL | PIN_DRVSTR_MAX,
   PIN_TERMINATE
};

static const I2CCC26XX_I2CPinCfg i2cMPUCfg = {
   .pinSDA = Board_I2C0_SDA1,
   .pinSCL = Board_I2C0_SCL1,
};

// Morse Code Table
const char* morse_code[26] = {
    ".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..", ".---",
    "-.-", ".-..", "--", "-.", "---", ".--.", "--.-", ".-.", "...", "-",
    "..-", "...-", ".--", "-..-", "-.--", "--.."
};

// Function Prototypes
void play_morse_with_buzzer(const char *message);
void interpret_morse(float ax, float ay, float az);

void buttonFxn(PIN_Handle handle, PIN_Id pinId) {
    // Button press toggles between WAITING and RECEIVING states
    programState = (programState == WAITING) ? RECEIVING : WAITING;
    uint_t pinValue = PIN_getOutputValue(Board_LED1);
    PIN_setOutputValue(ledHandle, Board_LED1, !pinValue); // Toggle LED on button press
}

Void uartTaskFxn(UArg arg0, UArg arg1) {
    UART_Handle uart;
    UART_Params uartParams;
    char input[100];
    int len;

    UART_Params_init(&uartParams);
    uartParams.writeDataMode = UART_DATA_TEXT;
    uartParams.readDataMode = UART_DATA_TEXT;
    uartParams.readEcho = UART_ECHO_ON;
    uartParams.readReturnMode = UART_RETURN_NEWLINE;
    uartParams.baudRate = 9600;

    uart = UART_open(Board_UART0, &uartParams);
    if (uart == NULL) {
       System_abort("Error opening the UART");
    }

    while (1) {
        System_printf("Enter a word to play in Morse code:\n");
        System_flush();

        len = UART_read(uart, input, sizeof(input) - 1);
        if (len > 0) {
            input[len] = '\0';  // Null-terminate input string
            for (int i = 0; i < len; i++) {
                input[i] = toupper(input[i]); // Convert to uppercase
            }
            play_morse_with_buzzer(input); // Play the Morse code
        }
        Task_sleep(100000 / Clock_tickPeriod); // Sleep for 100ms
    }
}

Void sensorTaskFxn(UArg arg0, UArg arg1) {
    float ax, ay, az, gx, gy, gz;
    I2C_Handle i2cMPU;
    I2C_Params i2cMPUParams;

    I2C_Params_init(&i2cMPUParams);
    i2cMPUParams.bitRate = I2C_400kHz;
    i2cMPUParams.custom = (uintptr_t)&i2cMPUCfg;

    PIN_setOutputValue(hMpuPin, Board_MPU_POWER, Board_MPU_POWER_ON);

    i2cMPU = I2C_open(Board_I2C, &i2cMPUParams);
    if (i2cMPU == NULL) {
       System_abort("Error Initializing I2C\n");
    }
    Task_sleep(10000 / Clock_tickPeriod);  // Wait for sensor to initialize
    mpu9250_setup(&i2cMPU);

    int spaceCount = 0;
    char currentWord[100] = "";
    int wordIndex = 0;

    while (1) {
        mpu9250_get_data(&i2cMPU, &ax, &ay, &az, &gx, &gy, &gz);

        // Process accelerometer data
        interpret_morse(ax, ay, az);

        if (spaceCount == 2) {
            // Print current word when two spaces are detected
            System_printf("Word: %s\n", currentWord);
            System_flush();
            spaceCount = 0;  // Reset space count
            currentWord[0] = '\0';  // Reset current word
            programState = RECEIVING;  // Switch back to receiving state
        }

        Task_sleep(100000 / Clock_tickPeriod); // Sleep for 100ms
    }

    I2C_close(i2cMPU); // Close I2C communication
}

void interpret_morse(float ax, float ay, float az) {
    if (ax > 0.5) {
        // Detect dot gesture (change threshold as necessary)
        System_printf(".\n");
        System_flush();
    } else if (ay > 0.5) {
        // Detect dash gesture
        System_printf("-\n");
        System_flush();
    }
}

void play_morse_with_buzzer(const char *message) {
    int i, j; // Declare `i` and `j` at the start of the function
    for (i = 0; message[i] != '\0'; i++) {
        char ch = message[i];
        if (ch >= 'A' && ch <= 'Z') {
            const char *code = morse_code[ch - 'A'];
            for (j = 0; code[j] != '\0'; j++) {
                if (code[j] == '.') {
                    PIN_setOutputValue(ledHandle, Board_LED1, 1);  // Turn LED on for dot
                    Task_sleep(MORSE_UNIT_DURATION / Clock_tickPeriod);
                    PIN_setOutputValue(ledHandle, Board_LED1, 0);  // Turn LED off
                } else if (code[j] == '-') {
                    PIN_setOutputValue(ledHandle, Board_LED1, 1);  // Turn LED on for dash
                    Task_sleep(3 * MORSE_UNIT_DURATION / Clock_tickPeriod);
                    PIN_setOutputValue(ledHandle, Board_LED1, 0);  // Turn LED off
                }
                Task_sleep(MORSE_UNIT_DURATION / Clock_tickPeriod); // Gap between symbols
            }
            Task_sleep(3 * MORSE_UNIT_DURATION / Clock_tickPeriod); // Gap between letters
        } else if (ch == ' ') {
            Task_sleep(7 * MORSE_UNIT_DURATION / Clock_tickPeriod); // Gap between words
        }
    }
}


Int main(void) {
    Task_Handle sensorTaskHandle;
    Task_Params sensorTaskParams;
    Task_Handle uartTaskHandle;
    Task_Params uartTaskParams;

    Board_initGeneral();
    Board_initI2C();
    Board_initUART();

    ledHandle = PIN_open(&ledState, ledConfig);
    if (!ledHandle) {
       System_abort("Error initializing LED pin\n");
    }

    buttonHandle = PIN_open(&buttonState, buttonConfig);
    if (!buttonHandle) {
       System_abort("Error initializing button pin\n");
    }

    if (PIN_registerIntCb(buttonHandle, &buttonFxn) != 0) {
       System_abort("Error registering button callback function");
    }

    hMpuPin = PIN_open(&MpuPinState, MpuPinConfig);
    if (!hMpuPin) {
       System_abort("Error initializing sensor pin\n");
    }

    Task_Params_init(&sensorTaskParams);
    sensorTaskParams.stackSize = STACKSIZE;
    sensorTaskParams.stack = &sensorTaskStack;
    sensorTaskParams.priority = 1;
    sensorTaskHandle = Task_create(sensorTaskFxn, &sensorTaskParams, NULL);
    if (sensorTaskHandle == NULL) {
        System_abort("Error creating sensor task\n");
    }

    Task_Params_init(&uartTaskParams);
    uartTaskParams.stackSize = STACKSIZE;
    uartTaskParams.stack = &uartTaskStack;
    uartTaskParams.priority = 1;
    uartTaskHandle = Task_create(uartTaskFxn, &uartTaskParams, NULL);
    if (uartTaskHandle == NULL) {
        System_abort("Error creating UART task\n");
    }

    BIOS_start();  // Start BIOS
}
