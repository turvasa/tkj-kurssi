main:
    irmovq stack,%rsp       # Initialize stack
    irmovq $00,%rcx         # result = 0

    # Fill stack with bit values 2^(2n)
    irmovq $0, %r14         # 0
    pushq %r14
    irmovq $1, %r14         # 1
    pushq %r14
    irmovq $4, %r14         # 4
    pushq %r14
    irmovq $16, %r14        # 16
    pushq %r14
    irmovq $64, %r14        # 64
    pushq %r14
    irmovq $256, %r14       # 256
    pushq %r14
    irmovq $1024, %r14      # 1 024
    pushq %r14
    irmovq $4096, %r14      # 4 096
    pushq %r14
    irmovq $16384, %r14     # 16 384
    pushq %r14
    irmovq $65536, %r14     # 65 536
    pushq %r14

    popq %r10               # bit = top value of stack
    irmovq $01,%r14         # consant 1

    jmp move_bit            # Make bit < num

    square_loop:            # while (true)
        andq %r10,%r10          # if (bit == 0)
        je end_square           #    break
        rrmovq %rcx,%r11        # temp = result
        addq %r10,%r11          # temp += bit
        rrmovq %r11,%r13        # tempCpy = temp
        subq %r12,%r11          # if (temp > num)
        jg larger               #    Jump to larger

        # Update bit, num and result
        subq %r13,%r12          # num -= tempCpy
        call move_result        # result >> 1
        addq %r10,%rcx          # result += bit
        popq %r10               # bit >> 2
        jmp square_loop

        # Update bit and result
        larger:
            call move_result        # result >> 1
            popq %r10               # bit >> 2
            jmp square_loop
    end_square:
    halt


move_bit:
    get_bit:                # while (true)
        rrmovq %r10,%r11        # currentBit = value on stack
        subq %r12,%r11          # if (currentBit <= num)
        jle end_get             #    break
        popq %r10               # bit =  >> 2
        jmp get_bit
    end_get:
    jmp square_loop


move_result:        # result >> 1
    rrmovq %rcx,%rax        # currentResult = result
    irmovq $00,%rdi         # bitResult = 0
    irmovq $63,%rsi         # bitsToShift = 64 - 1

    result_loop:            # while (true)
        addq %rdi,%rdi          # bitResult << 1
        andq %rax,%rax          # if (currentResult >= 0)
        jge shift               #    jump to shift
        xorq %r14,%rdi          # bitReuslt ^= 1
    shift:
        addq %rax,%rax          # currentResult << 1
        subq %r14,%rsi          # if (bitsToShift-- < 0)
        jne result_loop         #    continue
        rrmovq %rdi,%rcx        # result = bitResult
        ret


.pos 0x800
stack:
