# Tatu Tallavaara, ID: 2208317
#
# I'm calulating commands by counting the lines and for simplicity getting the average
# (if necessary). For example line count is different when bit is 1 than being a 0 in multiplication,
# so I would count the lines with for bit = 1 and bit = 0 separetly and calculating the average (probability
# is roughly 50%). The formulas are well simplified for the sake of an eye candy.
#
# Average command estimates:
#   Multiplication (n = multiplier a.k.a. %r12): 
#       commands ≈ 5 + n(9 + 3/2n)
#
#   Square root (n: 2^n < num a.k.a. %r12 and m = 24 - n): 
#       commands ≈ 31 + m(4 + 324n)
#
#   Whole project (n = list lenght from 0 to non fibonacci number, multi = multiplication commands, 
#                  sqrt = square root commands):
#       commands ≈ 2 + n(27 + 3/2*(3multi + sqrt))
#
# Peasant multiplication is like day and night comparing to normal one, which
# was easily noticed in smaller task, for example 1337 * 7331 took 266 commands with
# Peasant while normal algorithm would have taken 1+3*1337 = 4012 commands.
#
# Bit shift to left is most efficient to hadle with addq, so the num is added to it self, because
# one bit shift means multiplicating the num by 2.
#
# Most of the optimization was done in the square root and efficient multiplication in the smaller tasks.
# Only thing that I changed in them to fibonacci was sqapping the smaller value to multiplier in multiplication.
# However I haven't tested the non optimaized version, so I don't have any idea how magnificent differenxe it was,
# but I'm sure it would have been noticeable one.
#
# Mostly this project went smoothly, because I think all the hard functions were already done by this point. Only 
# difficult part was to get all register to be in sync with multiplication and square root, because they were 
# previously made. This took several hours (I could have used memory positions, but I just didn't realize that at    
# the time). The register issue would have been lesser, if all the implementations would be made to be part of the 
# whole project from the beginning. I also had some minor mistakes, that were captured with the online simulator 
# without much effort.
#






main:
    irmovq stack,%rsp       # Initialize stack
    irmovq $01,%r10         # Constant 1

    array_search:           # while (true)
        mrmovq (%r11),%rax      # Get arrayNum from array
        irmovq $08,%r8          # Constant 8
        addq %r8,%r11           # Move %r11 to next index in array
        rrmovq %rax,%rdx        # numCpy = arrayNum

        # Is list fully checked (last value is always 0)
            andq %rdx,%rdx          # if (numCpy == 0)
            je end_search           #    end_search

        # Check: 5 * (arrayNum ** 2) + 4

            # arrayNum = 5 * (arrayNum ** 2)
                call calculate_multiplications

            # arrayNum += 4
                irmovq $04,%r12         # Constant 4
                addq %r12,%rcx          # arrayNumCpy += 4

            call is_perfect_square      # Check is arrayNumCpy is perfect square
            
            # If arrayNum is perfect square, go to next number, else continue checking
                andq %rax,%rax          # if (arrayNum == 0)
                je array_search         #    check next number

        # Check: 5 * (arrayNum ** 2) - 4

            # arrayNum = 5 * (arrayNum ** 2)
                call calculate_multiplications

            # arrayNum -= 4
                irmovq $04,%r12         # Constant 4
                subq %r12,%rcx          # arrayNumCpy -= 4

            call is_perfect_square      # Check is arrayNumCpy is perfect square
            
            # If arrayNum is perfect square, go to next number, else end search
                andq %rax,%rax          # if (arrayNum == 0)
                je array_search         #    check next number

    end_search:
    halt



# Calculate: 5 * (arrayNum ** 2)
    calculate_multiplications:
        rrmovq %rax,%rcx        # arrayNumCpy = arrayNum

        # arrayNum **= 2
            rrmovq %rcx,%rdx        # %rdx = arrayNumCpy
            rrmovq %rcx,%r12        # %r12 = arrayNumCpy
            call multiplication     # arrayNumCpy *= arrayNumCpy (ergo: arrayNumCpy = %rdx * %r12)

        # arrayNum *= 5
            rrmovq %rcx,%rdx        # %rdx = arrayNumCpy
            irmovq $05,%r12         # %r12 = 5
            call multiplication     # arrayNumCpy *= 5 (ergo: arrayNumCpy = %rdx * %r12)

    ret                     # Return



# Check is %rcx a fibonacci number
# Return: the given arrayNum in %rcx to %rax, if arrayNum is not perfect square
# else continue checking

    is_perfect_square:

        rrmovq %rcx,%rbx        # ogParam = param

        # parap = sqrt(param)
            rrmovq %rcx,%r12    # %r12 = param
            jmp square_root     # param = sqrt(param) (ergo: = sqrt(%r12))
            end_square_root:

        # param *= param
            rrmovq %rcx,%rdx        # %rdx = square
            rrmovq %rcx,%r12        # %r12 = square
            call multiplication     # param *= param (ergo: param = %rdx * %r12)

        # Is param same as before calulating square root and power of two
        # If param is perfect square: ogParam = sqrt(param) ** 2 
            subq %rbx,%rcx          # if (param != ogParam)
            jne not_perfect         #    param is not perfect square
            
        # param is perfect square, so reset %rax to 0
            xorq %rax,%rax          # arrayNum = 0

        not_perfect:
    
    ret                     # Return








# Calculate: %rcx = %rdx * %r12

    multiplication:
        irmovq $0x01,%r9            # bit = 0x01
        irmovq $01,%r8              # count = 1
        xorq %rcx,%rcx              # result = 0

        call make_multiplier_smaller

        multi_loop:             # while (true)
            rrmovq %r12,%r13        # multiplierCpy = multiplier

            # Check is the bit to be handled a 1, if it is 0 skip adding to result
                andq %r9,%r13           # if ((multiplierCpy & 0b01) == 0)
                je skip_add             #    skip_add

            # Bit == 1: add bit shifted multiplicand to result
                rrmovq %rdx,%rdi        # multiplicandCpy = multiplicand
                rrmovq %r8,%rsi         # countCpy = count
                call multiplicand_shift # multiplidandCpy << count
                addq %rdi,%rcx          # result += multiplicandCpy

            skip_add:
                # Get next bit
                    addq %r9,%r9            # bit << 1
                    addq %r10,%r8           # count++
                    rrmovq %r12,%r13        # multiplierCpy = multiplier

                # Break the loop, if bit is larger that multiplier
                    subq %r9,%r13           # if (multiplierCpy < bit)
                    jge multi_loop          #    break  

    ret                     # Return



    # If %r12 > %rdx, change the values between each others
    # This will make the multiplication algorithm more efficient

        make_multiplier_smaller:
            rrmovq %r12,%r14            # multiplierCpy = multiplier

            # Check which register is larger
                subq %rdx,%r14              # if (multiplierCpy <= multiplicand)
                jle skip_change             #    skip_change

            # Change values of %r12 and %rdx between each others
                rrmovq %r12,%r14            # multiplierCpy = multiplier
                rrmovq %rdx,%r12            # multiplier = multiplicand
                rrmovq %r14,%rdx            # multiplicand = multiplierCpy

        skip_change:
    
        ret                     # Return



    # Bit shift multiplicand to left by one (multiplicand << 1)

        multiplicand_shift:     # multi << count
            shift_loop:              # while (true)

                # Check is the count 0, break the loop if it is
                    subq %r10,%rsi          # if (count-- == 0)
                    je end_shift            #    break

                # Count is not 0: do bit shift
                    addq %rdi,%rdi          # multi << 1
                    jmp shift_loop

            end_shift:
        
        ret                     # Return






# Calculate: %rcx = sqrt(%r12)

    square_root:
        irmovq $00,%rcx         # result = 0

        # Fill stack with bit values 2^(2n)
        # Largest possible value in %r12 = 1000^2 * 5 + 4 = 5 000 004 < 2^24
            irmovq $0, %r14         # 0
            pushq %r14
            irmovq $1, %r14         # 2^0  = 1
            pushq %r14
            irmovq $4, %r14         # 2^2  = 4
            pushq %r14
            irmovq $16, %r14        # 2^4  = 16
            pushq %r14
            irmovq $64, %r14        # 2^6  = 64
            pushq %r14
            irmovq $256, %r14       # 2^8  = 256
            pushq %r14
            irmovq $1024, %r14      # 2^10 = 1 024
            pushq %r14
            irmovq $4096, %r14      # 2^12 = 4 096
            pushq %r14
            irmovq $16384, %r14     # 2^14 = 16 384
            pushq %r14
            irmovq $65536, %r14     # 2^16 = 65 536
            pushq %r14
            irmovq $262144, %r14    # 2^18 = 262 144
            pushq %r14
            irmovq $1048576, %r14   # 2^20 = 1 048 576
            pushq %r14
            irmovq $4194304, %r14   # 2^22 = 4 194 304
            pushq %r14
            irmovq $16777216, %r14  # 2^24 = 16 777 216
            pushq %r14

        popq %r14               # bit = top value of stack
        jmp move_bit            # Make bit < num

        square_loop:            # while (true)

            # Is bit zero
                andq %r14,%r14          # if (bit == 0)
                je end_square           #    break

            # Check which is larger: result + bit or num
                rrmovq %rcx,%rdx        # temp = result
                addq %r14,%rdx          # temp += bit
                rrmovq %rdx,%r13        # tempCpy = temp

                subq %r12,%rdx          # if (tempCpy <= num)
                jle num_is_larger       #    Jump to num_is_larger

            # num is smaller: update bit and result
                call move_result        # result >> 1
                popq %r14               # bit >> 2
                jmp square_loop

            # num is larger: update bit, num and result
                num_is_larger:
                    subq %r13,%r12          # num -= tempCpy
                    call move_result        # result >> 1
                    addq %r14,%rcx          # result += bit
                    popq %r14               # bit >> 2
                    jmp square_loop

        end_square:

        jmp end_square_root         # End square root calculation



    # Do: bit >> 2, until bit < num
        move_bit:
            get_bit:                # while (true)
                rrmovq %r14,%rdx        # currentBit = value on stack

                # Check is the currentBit yet smaller or equals to num
                    subq %r12,%rdx          # if (currentBit <= num)
                    jle end_get             #    break

                # Bit shift via pop of stack
                    popq %r14               # bit =  >> 2
                    jmp get_bit

            end_get:

        jmp square_loop



    # Do: result >> 1
        move_result:
            rrmovq %rcx,%rbp        # currentResult = result
            irmovq $00,%rdi         # bitResult = 0
            irmovq $63,%rsi         # bitsToShift = 64 - 1

            result_loop:            # while (true)
                addq %rdi,%rdi          # bitResult << 1

                # Check is result greater or equal to 0
                    andq %rbp,%rbp          # if (currentResult >= 0)
                    jge shift               #    jump to shift
                
                # result is negative
                    xorq %r10,%rdi          # bitResult ^= 1
                
                # result is positive or 0
                    shift:
                        addq %rbp,%rbp          # currentResult << 1

                        # If bitsToShift == 0, break the loop
                            subq %r10,%rsi          # if (bitsToShift-- == 0)
                            jne result_loop         #    break

        # Save calculated bitResult to result
            rrmovq %rdi,%rcx        # result = bitResult
                
        ret                     # Return






.pos 0x400
stack:

.pos 0x700
array:
